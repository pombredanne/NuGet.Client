
parameters:
- name: isOfficialBuild
  type: boolean
  default: false
- name: DartLabEnvironment
  displayName: DartLab Environment
  type: string
  default: Production
  values:
  - Production
  - Staging
- name: ApexAgentCleanup
  displayName: Delete or keep VS Apex test machine for debugging
  type: string
  default: delete
  values:
  - delete
  - stop
- name: NuGetLocalizationType
  displayName: Whether to do production-ready localization (Full), or pseudo-localization, aka PLOC, (Pseudo) for testing.
  type: string
  default: Full
  values:
  - Full
  - Pseudo

resources:
  pipelines:
  - pipeline: DartLab
    source: DartLab
    branch: main
  repositories:
  - repository: DartLabTemplates
    type: git
    name: DartLab.Templates
    ref: refs/heads/main

variables:
  DOTNET_NOLOGO: 1
  Codeql.Enabled: ${{ parameters.isOfficialBuild }}
  Codeql.TSAEnabled: ${{ parameters.isOfficialBuild }}

stages:
- stage: Initialize
  jobs:
  - job: GetSemanticVersion
    displayName: Get NuGet.Client semantic version
    timeoutInMinutes: 10
    pool:
      vmImage: windows-latest
    steps:
    - template: Initialize_Build_SemanticVersion.yml

  - job: Initialize_Build
    dependsOn: GetSemanticVersion
    timeoutInMinutes: 10
    variables:
      SemanticVersion: $[dependencies.GetSemanticVersion.outputs['setsemanticversion.SemanticVersion']]
      BuildRevision: $[counter(format('{0}.{1}', variables['SemanticVersion'], variables['build.definitionname']), 1)]
    pool:
      vmImage: windows-latest
    steps:
    - template: Initialize_Build.yml

  displayName: Static Source Analysis
  dependsOn: []
  jobs:
  - job: RunStaticSourceAnalysis
    displayName: Run Static Source Analysis
    timeoutInMinutes: 15
    pool:
      vmImage: windows-latest
    steps:
    - template: Static_Source_Analysis.yml
      parameters:
        isOfficialBuild: ${{ parameters.isOfficialBuild }}

- stage: Build_Insertable
  displayName: Build NuGet inserted into VS and .NET SDK
  dependsOn: Initialize
  jobs:
  - job: Build_and_UnitTest_NonRTM
    timeoutInMinutes: 170
    variables:
      BuildNumber: $[stageDependencies.Initialize.Initialize_Build.outputs['updatebuildnumber.BuildNumber']]
      FullVstsBuildNumber: $[stageDependencies.Initialize.Initialize_Build.outputs['updatebuildnumber.FullVstsBuildNumber']]
      VsTargetChannel: $[stageDependencies.Initialize.Initialize_Build.outputs['updatebuildnumber.VsTargetChannel']]
      VsTargetChannelForTests: $[stageDependencies.Initialize.Initialize_Build.outputs['updatebuildnumber.VsTargetChannelForTests']]
      VsTargetMajorVersion: $[stageDependencies.Initialize.Initialize_Build.outputs['updatebuildnumber.VsTargetMajorVersion']]
      SDKVersionForBuild: $[stageDependencies.Initialize.Initialize_Build.outputs['getSDKVersionForBuild.SDKVersionForBuild']]
      BuildRTM: "false"
      SemanticVersion: $[stageDependencies.Initialize.GetSemanticVersion.outputs['setsemanticversion.SemanticVersion']]
    pool:
      name: VSEngSS-MicroBuild2022-1ES
    steps:
    - template: Build_and_UnitTest.yml
      parameters:
        BuildRTM: false
        NuGetLocalizationType: ${{ parameters.NuGetLocalizationType }}

  displayName: Build NuGet published to nuget.org
  dependsOn: Initialize
  jobs:
  - job: Build_and_UnitTest_RTM
    timeoutInMinutes: 170
    variables:
      BuildNumber: $[stageDependencies.Initialize.Initialize_Build.outputs['updatebuildnumber.BuildNumber']]
      FullVstsBuildNumber: $[stageDependencies.Initialize.Initialize_Build.outputs['updatebuildnumber.FullVstsBuildNumber']]
      VsTargetChannel: $[stageDependencies.Initialize.Initialize_Build.outputs['updatebuildnumber.VsTargetChannel']]
      VsTargetChannelForTests: $[stageDependencies.Initialize.Initialize_Build.outputs['updatebuildnumber.VsTargetChannelForTests']]
      VsTargetMajorVersion: $[stageDependencies.Initialize.Initialize_Build.outputs['updatebuildnumber.VsTargetMajorVersion']]
      SDKVersionForBuild: $[stageDependencies.Initialize.Initialize_Build.outputs['getSDKVersionForBuild.SDKVersionForBuild']]
      BuildRTM: "true"
    pool:
      name: VSEngSS-MicroBuild2022-1ES
    steps:
    - template: Build_and_UnitTest.yml
      parameters:
        BuildRTM: true
        NuGetLocalizationType: Full

# Dartlab's template defines this in its own stage
- template: Apex_Tests_On_Windows.yml
  parameters:
    condition: "and(succeeded())"
    dependsOn:
      - Initialize
      - Build_Insertable
    variables:
      - name: VsBootstrapperUrl
        value: $[stageDependencies.Build_Insertable.Build_and_UnitTest_NonRTM.outputs['vsbootstrapper.bootstrapperUrl']]
      - name: GitHubStatusName
        value: Daily Visual Studio Tests
    isOfficialBuild: ${{parameters.isOfficialBuild}}
    runSettingsURI: https://vsdrop.corp.microsoft.com/file/v1/RunSettings/$(System.TeamProject)/$(Build.Repository.Name)/$(Build.SourceBranchName)/$(Build.BuildId);NuGet.Tests.EndToEnd.runsettings
    dartLabEnvironment: ${{parameters.DartLabEnvironment}}
    testExecutionJobTimeoutInMinutes: 150
    bootstrapperUrl: $(VsBootstrapperUrl)
    testMachineCleanUpStrategy: ${{parameters.ApexAgentCleanup}}
